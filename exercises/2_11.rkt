#lang racket

(require test-engine/racket-tests)

(define (make-interval a b) (cons a b))
(define (lower-bound interval) (car interval))
(define (upper-bound interval) (cdr interval))

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (sub-interval x y)
  (make-interval (- (lower-bound x) (upper-bound y))
                 (- (upper-bound x) (lower-bound y))))


(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (mul-interval-1 x y)
  (let ((s1 (>= (lower-bound x) 0))
        (s2 (>= (upper-bound x) 0))
        (s3 (>= (lower-bound y) 0))
        (s4 (>= (upper-bound y) 0))
        (x1 (lower-bound x))
        (x2 (upper-bound x))
        (y1 (lower-bound y))
        (y2 (upper-bound y)))
    (cond ((and s1 s2 (not s3) s4)
           (make-interval (* x2 y1) (* x2 y2)))
          ((and s1 s2 (not s3) (not s4))
           (make-interval (* x2 y2) (* x1 y1)))
          ((and (not s1) s2 (not s3) s4)
           (make-interval (min (* x1 y2) (* x2 y1))
                          (max (* x1 y1) (* x2 y2))))
          ((and (not s1) s2 (not s3) (not s4))
           (make-interval (* x2 y1) (* x1 y2)))
          ((and (not s1) (not s2) s3 s4)
           (make-interval (* x1 y2) (* x2 y1)))
          ((and (not s1) (not s2) (not s3) s4)
           (make-interval (* x2 y2) (* x2 y1)))
          (else (make-interval (* x1 y1) (* x2 y2))))))

(define (div-interval x y)
  (if (> (* (lower-bound y) (upper-bound y)) 0)
    (mul-interval x
                  (make-interval (/ 1.0 (upper-bound y))
                                 (/ 1.0 (lower-bound y))))
    (error "divided by interval containing 0.")))

(define (print-interval i)
  (display "(")
  (display (lower-bound i))
  (display ", ")
  (display (upper-bound i))
  (display ")")
  (newline))

(define i1 (make-interval 2 8))
(define i2 (make-interval 1 4))
(define i3 (make-interval -1 4))
(define i4 (make-interval -1 -4))

(check-expect (mul-interval i1 i1) (mul-interval-1 i1 i1))
(check-expect (mul-interval i1 i2) (mul-interval-1 i1 i2))
(check-expect (mul-interval i1 i3) (mul-interval-1 i1 i3))
(check-expect (mul-interval i1 i4) (mul-interval-1 i1 i4))
(check-expect (mul-interval i3 i1) (mul-interval-1 i3 i1))
(check-expect (mul-interval i3 i3) (mul-interval-1 i3 i3))
(check-expect (mul-interval i3 i4) (mul-interval-1 i3 i4))
(check-expect (mul-interval i4 i1) (mul-interval-1 i4 i1))
(check-expect (mul-interval i4 i3) (mul-interval-1 i4 i3))
(check-expect (mul-interval i4 i4) (mul-interval-1 i4 i4))
